>use test
> show collections
movies
post
users
> db.movies.insert({Title :"Fight club", Writer :"Chuck Plalahniuk", Year:"1999 ", Actors : ["Brad Pitt","Edward Norton"]})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({Title :"pulp Fiction", Writer: "nitish Kumar", year:"1994", Actors: ["john tavolta","uma Thurman"]})
WriteResult({ "nInserted" : 1 })
> db.movies.find()
{ "_id" : ObjectId("628c7528145941a956b2b72b"), "Title" : "Fight club", "Writer" : "Chuck Plalahniuk", "Year" : "1999 ", "Actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("628c7662145941a956b2b72c"), "Title" : "pulp Fiction", "Writer" : "nitish Kumar", "year" : "1994", "Actors" : [ "john tavolta", "uma Thurman" ] }
> db.movies.insert({Title : "Inglorious Basterds", Writer: "Quentin Tarantion", Year:"2000", Actors :["Brad Pitt","DaineKrugar","Eli Roth"]})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({Title : "The Hobbit : An Unexpected Journey", Writer: "J.R.R Tolkein",Year:"2010", Franchise: "The Hobbit"})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({Title : "The Hobbit: The Desolation of smaug", Writer :"J.R.R Tokein", Year: "2012",franchise :"The Hobbit"})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({Title : "The Hobbit: The Battle of the five armies", writer :"J.R.R Tolkein", Year : "2013",franchise :"the Hobbit",synopsis : "Bilbo and company are force to engage in war an aray of combatants and keep the lonely mountain from falling  into the hands of raising darksness."})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({Title : "pee wee Herman's Big Adventure"})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({Title : "Avatar"})
WriteResult({ "nInserted" : 1 })
> db.movies.find({Writer:"Quentin Tarantion"})
{ "_id" : ObjectId("628c7775145941a956b2b72d"), "Title" : "Inglorious Basterds", "Writer" : "Quentin Tarantion", "Year" : "2000", "Actors" : [ "Brad Pitt", "DaineKrugar", "Eli Roth" ] }
> db.movies.find({Actors : "Brad Pitt"})
{ "_id" : ObjectId("628c7528145941a956b2b72b"), "Title" : "Fight club", "Writer" : "Chuck Plalahniuk", "Year" : "1999 ", "Actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("628c7775145941a956b2b72d"), "Title" : "Inglorious Basterds", "Writer" : "Quentin Tarantion", "Year" : "2000", "Actors" : [ "Brad Pitt", "DaineKrugar", "Eli Roth" ] }
> db.movies.find({ year :{$gt : "1999 ",$lt:"2002"}})
> db.movies.find({$or:[year:{$gt:"2010"}},{year: {$lt:"2000"}}]})
uncaught exception: SyntaxError: missing ] after element list :
@(shell):1:25
> db.movies.find({$or:[{year :{$gt:"2010"}},{year:{$lt:"2000"}}]})
{ "_id" : ObjectId("628c7662145941a956b2b72c"), "Title" : "pulp Fiction", "Writer" : "nitish Kumar", "year" : "1994", "Actors" : [ "john tavolta", "uma Thurman" ] }
> db.movies.update({_id:ObjectId("628c7afa145941a956b2b732")}, {$set:{synopsis:"A recluntant hobbit,Bilbo Baggins,set out to the lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold with in -From the drogon smuaug."}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.movies.update({_id:ObjectId("628c7662145941a956b2b72c")},{$set:{synopsis:" The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to recliam Erebor,their homeland, from smaug.Bilbo Baggins is in possession of a myterious and magical ring."}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.movies.update({_id:ObjectId("628c7775145941a956b2b72d")},{$push:{Actors:"Samuel L . Jackson"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.movies.find({synopsis:{$regex:"Bilbo"}})
{ "_id" : ObjectId("628c7662145941a956b2b72c"), "Title" : "pulp Fiction", "Writer" : "nitish Kumar", "year" : "1994", "Actors" : [ "john tavolta", "uma Thurman" ], "synopsis" : " The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to recliam Erebor,their homeland, from smaug.Bilbo Baggins is in possession of a myterious and magical ring." }
{ "_id" : ObjectId("628c7925145941a956b2b72f"), "Title" : "The Hobbit: The Desolation of smaug", "Writer" : "J.R.R Tokein", "Year" : "2012", "franchise" : "The Hobbit", "synopsis" : "A reluctanat hobbit,Bilbo Baggins,sets out the Lonely Mountain with a sprited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon smaug." }
{ "_id" : ObjectId("628c7a5a145941a956b2b730"), "Title" : "The Hobbit: The Battle of the five armies", "writer" : "J.R.R Tolkein", "Year" : "2013", "franchise" : "the Hobbit", "synopsis" : "Bilbo and company are force to engage in war an aray of combatants and keep the lonely mountain from falling  into the hands of raising darksness." }
{ "_id" : ObjectId("628c7afa145941a956b2b732"), "Title" : "Avatar", "synopsis" : "A recluntant hobbit,Bilbo Baggins,set out to the lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold with in -From the drogon smuaug." }
> db.movies.find({synopsis:{$regex:"Gandalf"}})
{ "_id" : ObjectId("628c7662145941a956b2b72c"), "Title" : "pulp Fiction", "Writer" : "nitish Kumar", "year" : "1994", "Actors" : [ "john tavolta", "uma Thurman" ], "synopsis" : " The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to recliam Erebor,their homeland, from smaug.Bilbo Baggins is in possession of a myterious and magical ring." }
> db.movies.find({$or:[{synopsis:{$regex:"dwarves"}},{synopsis:{$regex:"Hobbit}}]})
uncaught exception: SyntaxError: "" literal not terminated before end of script :
@(shell):1:81
> db.movies.find({$or:[{synopsis:{$regex:"dwarves"}},{synopsis:{$regex:"Hobbit"}}]})
{ "_id" : ObjectId("628c7662145941a956b2b72c"), "Title" : "pulp Fiction", "Writer" : "nitish Kumar", "year" : "1994", "Actors" : [ "john tavolta", "uma Thurman" ], "synopsis" : " The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to recliam Erebor,their homeland, from smaug.Bilbo Baggins is in possession of a myterious and magical ring." }
{ "_id" : ObjectId("628c7925145941a956b2b72f"), "Title" : "The Hobbit: The Desolation of smaug", "Writer" : "J.R.R Tokein", "Year" : "2012", "franchise" : "The Hobbit", "synopsis" : "A reluctanat hobbit,Bilbo Baggins,sets out the Lonely Mountain with a sprited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon smaug." }
{ "_id" : ObjectId("628c7afa145941a956b2b732"), "Title" : "Avatar", "synopsis" : "A recluntant hobbit,Bilbo Baggins,set out to the lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold with in -From the drogon smuaug." }
> db.movies.find({$and:[{synopsis:{$regex:"gold"}},{synopsis:"drogon"}}]})
uncaught exception: SyntaxError: missing ] after element list :
@(shell):1:68
> db.movies.find({$and:[{synopsis:{$regex:"gold"}}, {synopsis:{$regex:"drogon"}}]})
{ "_id" : ObjectId("628c7afa145941a956b2b732"), "Title" : "Avatar", "synopsis" : "A recluntant hobbit,Bilbo Baggins,set out to the lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold with in -From the drogon smuaug." }
> db.users.insert({_id:1, username: "GoodGuyGreg", First_name :"Good Guy", Last_name : "Greg"})
WriteResult({ "nInserted" : 1 })
> db.users({_id :2, username: "ScumbagSteve", Fullname:{First:"Scumbag", last: "Steve"}})
uncaught exception: TypeError: db.users is not a function :
@(shell):1:1
> db.users.insert({_id :2 ,username:"ScumbagSteve",Fullname:{First:"Scumbag", last:"Steve"}])
uncaught exception: SyntaxError: missing } after property list :
@(shell):1:89
> db.users.insert({_id:2 ,username:"ScumbagSteve",Fullname:{First:"Scumbag", last:"Steve"}})
WriteResult({ "nInserted" : 1 })
> db.post.insert({username:"GoodGuyGreg",title:"Passes out at party",body:"Wakes up early and cleans house"})
WriteResult({ "nInserted" : 1 })
> db.post.insert({username:"GoodGuyGreg",title:"Steals your identity",body:"Raises your credit score"})
WriteResult({ "nInserted" : 1 })
> db.post.insert({username:"GoodGuyGreg",title:" Reports a bug in your code",body:"send you a pull request"})
WriteResult({ "nInserted" : 1 })
> db.post.insert({username:"ScumbagSteve",titile:"Borrows Something",body:"Sells it"})
WriteResult({ "nInserted" : 1 })
> db.post.insert({username:"ScumbagSteve",title:"Borrows Everything",body:"The end"})
WriteResult({ "nInserted" : 1 })
> db.post({username:"ScumbagSteve",title:"Forks your repo on github",body:"Sets to private"})
uncaught exception: TypeError: db.post is not a function :
@(shell):1:1
> db.post.insert({username:"ScumbagSteve",title:"Forks your repo on github",body:"sets to private"})
WriteResult({ "nInserted" : 1 })
> db.post.find()
{ "_id" : ObjectId("628dc44b83b16262004c0843"), "username" : "GoodGuyGreg", "title" : "Passes out at party", "body" : "Wakes up early and cleans house" }
{ "_id" : ObjectId("628dc4b483b16262004c0844"), "username" : "GoodGuyGreg", "title" : "Steals your identity", "body" : "Raises your credit score" }
{ "_id" : ObjectId("628dc50b83b16262004c0845"), "username" : "GoodGuyGreg", "title" : " Reports a bug in your code", "body" : "send you a pull request" }
{ "_id" : ObjectId("628dc56f83b16262004c0846"), "username" : "ScumbagSteve", "titile" : "Borrows Something", "body" : "Sells it" }
{ "_id" : ObjectId("628dc5b383b16262004c0847"), "username" : "ScumbagSteve", "title" : "Borrows Everything", "body" : "The end" }
{ "_id" : ObjectId("628dc63f83b16262004c0848"), "username" : "ScumbagSteve", "title" : "Forks your repo on github", "body" : "sets to private" }
> db.createCollection('Comments')
{ "ok" : 1 }
> db.Comments.insert({username:"GoodGuyGreg",comments:"Hope you got a good deal!",post:ObjectId("628dc44b83b16262004c0843")
... })
WriteResult({ "nInserted" : 1 })
> db.Comments.insert({username : "GoodGuyGreg",Comments:"What's mine is yours!" ,post:ObjectId("628dc4b483b16262004c0844")})
WriteResult({ "nInserted" : 1 })
> db.Comments.insert({username : "GoodGuyGreg", Comments:"Dont violate the license agreement!",post:ObjectId("628dc50b83b16262004c0845")})
WriteResult({ "nInserted" : 1 })
> db.Comments.insert({username:"ScumbugSteve", Comment:"it still isn't clean",post:ObjectId("628dc5b383b16262004c0847")})
WriteResult({ "nInserted" : 1 })
> db.comments.insert({username:"ScumbugSteve",Comment:"Denied PR cause I Found a hack " ,post:ObjectId("628dc63f83b16262004c0848")})
WriteResult({ "nInserted" : 1 })
switched to db test
...........................................................................................................................................................
use test
> show collections
movies
post
users
> db.post.find({username : "GoodGuyGreg"})
{ "_id" : ObjectId("628dc44b83b16262004c0843"), "username" : "GoodGuyGreg", "title" : "Passes out at party", "body" : "Wakes up early and cleans house" }
{ "_id" : ObjectId("628dc4b483b16262004c0844"), "username" : "GoodGuyGreg", "title" : "Steals your identity", "body" : "Raises your credit score" }
{ "_id" : ObjectId("628dc50b83b16262004c0845"), "username" : "GoodGuyGreg", "title" : " Reports a bug in your code", "body" : "send you a pull request" }
> db.post.find({username : "ScumbagSteve"})
{ "_id" : ObjectId("628dc56f83b16262004c0846"), "username" : "ScumbagSteve", "titile" : "Borrows Something", "body" : "Sells it" }
{ "_id" : ObjectId("628dc5b383b16262004c0847"), "username" : "ScumbagSteve", "title" : "Borrows Everything", "body" : "The end" }
{ "_id" : ObjectId("628dc63f83b16262004c0848"), "username" : "ScumbagSteve", "title" : "Forks your repo on github", "body" : "sets to private" }
> db.Comments.find({username :"ScumbugSteve"})
>






























